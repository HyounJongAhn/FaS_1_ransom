#include "rsa_dec.h"
#include "print.h"


BYTE e[3] = { 0x01, 0x00, 0x01 };
BYTE n[512] = {
                0xb8, 0xe1, 0x15, 0x92, 0x26, 0x7c, 0xe0, 0x79, 0xdb, 0x5a, 0x55, 0x70, 0xe4, 0x49, 0x03, 0x00,
0x08, 0x40, 0x5a, 0x1b, 0x69, 0x83, 0x3a, 0xb7, 0xb6, 0xb8, 0x03, 0x4a, 0x0e, 0xff, 0xfa, 0x1f,
0xc8, 0x9b, 0x15, 0xde, 0x7d, 0x85, 0x39, 0x1f, 0x32, 0xc6, 0xce, 0x3f, 0xc4, 0x0b, 0xb7, 0x9d,
0xe8, 0x74, 0x1e, 0x62, 0x87, 0x1d, 0x7a, 0x79, 0x9a, 0x65, 0x6e, 0x18, 0x5c, 0xfa, 0x9d, 0x51,
0x21, 0x8f, 0x55, 0xf9, 0x99, 0x92, 0x02, 0xce, 0xdc, 0xb3, 0x39, 0xdf, 0x25, 0xab, 0x75, 0x07,
0x3a, 0xa0, 0x7b, 0x6f, 0xdd, 0x1a, 0xbc, 0xb9, 0x53, 0x21, 0xc9, 0x2b, 0xd9, 0xbe, 0x1e, 0x52,
0x19, 0xe8, 0x5d, 0x5b, 0xe2, 0x5e, 0xc3, 0xf9, 0xba, 0xfd, 0xb1, 0xef, 0xcc, 0x7f, 0xad, 0xc5,
0x44, 0xf1, 0x6e, 0xca, 0x91, 0x7a, 0xf1, 0x88, 0x8a, 0x8b, 0xb6, 0xf5, 0x41, 0x0e, 0x14, 0xd6,
0x5c, 0xe4, 0x62, 0x0e, 0x2e, 0xab, 0x76, 0xca, 0x69, 0x0a, 0x80, 0xbe, 0x0f, 0xb4, 0xa4, 0x40,
0xec, 0xc7, 0x74, 0xfc, 0x87, 0x16, 0xa8, 0x45, 0x0a, 0xf1, 0xca, 0x5a, 0xcf, 0x8c, 0x30, 0xf6,
0x4c, 0x06, 0xe0, 0xe4, 0xbb, 0xc9, 0x80, 0x66, 0x62, 0x6b, 0x82, 0x17, 0xb6, 0x0d, 0xf7, 0x2f,
0x69, 0x58, 0xa5, 0x92, 0x0a, 0x7c, 0xcc, 0x99, 0x57, 0xb2, 0x7c, 0xdc, 0x4f, 0x7e, 0x66, 0x03,
0x6a, 0x88, 0x4a, 0xef, 0x42, 0xad, 0x11, 0x93, 0x02, 0x61, 0x24, 0xf5, 0x56, 0x21, 0x9f, 0xa8,
0xb6, 0xd2, 0x84, 0x03, 0x33, 0x27, 0x99, 0x07, 0x72, 0xe8, 0xe1, 0x48, 0x56, 0x94, 0x1a, 0x89,
0x30, 0x9d, 0x06, 0x98, 0x5b, 0x1e, 0x86, 0x85, 0x6f, 0x46, 0xbf, 0xba, 0x31, 0xb1, 0x5c, 0x12,
0xa2, 0x20, 0xed, 0x22, 0x10, 0x3a, 0x57, 0xe0, 0xca, 0xbb, 0xe7, 0x04, 0xd3, 0x75, 0xae, 0x04,
0x3d, 0xce, 0x10, 0x90, 0xe5, 0x8c, 0xdf, 0x33, 0xaf, 0x00, 0x15, 0x5d, 0xc3, 0x0e, 0xea, 0x20,
0xa1, 0xe5, 0x13, 0x95, 0xda, 0x4b, 0x83, 0x04, 0x7b, 0xf7, 0x6b, 0xf3, 0x2f, 0x5f, 0x94, 0x77,
0x4b, 0x0c, 0x75, 0xbd, 0x6a, 0xee, 0x49, 0x0e, 0x0f, 0x34, 0x53, 0x7d, 0xe4, 0x2d, 0xb9, 0x08,
0xe3, 0x8f, 0xc7, 0x8e, 0x33, 0x6c, 0x91, 0xfa, 0xb9, 0xa5, 0x31, 0x34, 0x6f, 0x16, 0xba, 0xf3,
0xc5, 0xc9, 0x59, 0x5b, 0xc7, 0xf6, 0x20, 0xe8, 0x35, 0x3e, 0x0b, 0x36, 0xb5, 0xcf, 0xe2, 0x3f,
0x68, 0x89, 0x0d, 0xdd, 0xb7, 0xc1, 0xf8, 0x18, 0x6b, 0xb8, 0x60, 0x9b, 0xfa, 0x86, 0x15, 0x56,
0xe5, 0x33, 0x4d, 0x19, 0xc0, 0x56, 0xed, 0x57, 0xa9, 0x23, 0x7a, 0xb0, 0x29, 0x9c, 0x1d, 0x85,
0x65, 0xdd, 0xee, 0x67, 0x95, 0xff, 0x72, 0x4f, 0xd5, 0x34, 0x21, 0xb1, 0xbb, 0x8d, 0x21, 0x9c,
0x26, 0x3f, 0xd7, 0x48, 0xea, 0xc4, 0x7f, 0x82, 0x8b, 0xfb, 0xd6, 0x29, 0x44, 0x99, 0x53, 0x31,
0xcb, 0x36, 0x90, 0x31, 0x86, 0xf0, 0xb4, 0xfa, 0x3b, 0x6d, 0x99, 0x3f, 0x5b, 0xe6, 0xd7, 0xf3,
0x4d, 0x31, 0xa5, 0x7c, 0xb2, 0xce, 0x10, 0xca, 0x0c, 0x61, 0xd0, 0x1e, 0x0a, 0xc6, 0x3a, 0x4e,
0xa1, 0xa1, 0xb8, 0xb9, 0x70, 0x5b, 0xd2, 0x61, 0xc5, 0xda, 0x7b, 0x3c, 0x6c, 0x4e, 0xe7, 0xde,
0x6b, 0xc6, 0xdb, 0x6a, 0x06, 0x50, 0x3b, 0x66, 0xbf, 0x06, 0x89, 0x57, 0xf4, 0xea, 0x64, 0xf4,
0xd2, 0x28, 0x9f, 0x3a, 0x1a, 0xef, 0x3c, 0x97, 0x6a, 0x23, 0x67, 0x4d, 0xc6, 0xc4, 0x71, 0xd8,
0x38, 0x87, 0xa2, 0xdf, 0xff, 0xad, 0x23, 0x3a, 0x44, 0x15, 0x49, 0xc5, 0xaf, 0xfa, 0xfd, 0x8a,
0xd7, 0x4c, 0x3b, 0x21, 0x90, 0x22, 0xa4, 0xfe, 0x16, 0xd1, 0xd2, 0x59, 0xbb, 0xe7, 0x1a, 0x33 };

BYTE p[256] = {
                0xd3, 0x3b, 0x33, 0x3d, 0x32, 0x27, 0xb0, 0xaf, 0xa0, 0x1c, 0x8f, 0xca, 0x71, 0xf3, 0x49, 0xd1,
0xc1, 0x61, 0x97, 0xdb, 0xdb, 0x91, 0xd0, 0xee, 0xa7, 0x46, 0x1b, 0x1e, 0x77, 0xa9, 0x26, 0x32,
0x16, 0xd8, 0xac, 0xf2, 0xb0, 0x86, 0x69, 0x89, 0x0a, 0xff, 0x89, 0xbd, 0xe8, 0x5b, 0x3f, 0xc2,
0x5a, 0x7f, 0xd4, 0xcd, 0xef, 0x04, 0x12, 0x86, 0xe9, 0x73, 0x23, 0x69, 0xa6, 0x81, 0x9c, 0x57,
0x33, 0x5c, 0x42, 0xf2, 0x1f, 0xf0, 0xa1, 0x56, 0xa9, 0x81, 0xa8, 0x71, 0xdc, 0x56, 0x1d, 0x31,
0xf3, 0x56, 0x83, 0x47, 0x4f, 0x4a, 0x9e, 0x7b, 0x80, 0x93, 0x73, 0x03, 0xc2, 0x63, 0x78, 0x84,
0xca, 0x42, 0x13, 0x0a, 0xc9, 0x29, 0x2a, 0x48, 0x53, 0xf8, 0xbe, 0xf5, 0x63, 0xb4, 0x3e, 0xbe,
0xa8, 0xb3, 0x8c, 0x99, 0x2a, 0x6d, 0x86, 0x99, 0x25, 0x78, 0x7b, 0x4b, 0x05, 0xdb, 0x4b, 0x4c,
0x69, 0xdd, 0x5a, 0xc3, 0x4e, 0x5b, 0xd8, 0x4e, 0x62, 0xad, 0x49, 0x56, 0xcb, 0x16, 0x6f, 0x36,
0xbb, 0x5b, 0x45, 0x49, 0x2f, 0xd8, 0xeb, 0x46, 0x60, 0xa8, 0x70, 0x96, 0x39, 0xf6, 0xbe, 0x0c,
0xd9, 0x2f, 0xa8, 0xd2, 0xf6, 0xd8, 0xe4, 0x83, 0xf8, 0xa5, 0xc1, 0x6e, 0xb3, 0xa7, 0x16, 0xd2,
0xf2, 0x05, 0xf1, 0x20, 0xaf, 0x40, 0x3a, 0xf2, 0xbc, 0xd0, 0x7a, 0xa3, 0xb7, 0x1e, 0x79, 0x77,
0xed, 0xe7, 0xfd, 0x41, 0x6c, 0x6e, 0x5a, 0xd2, 0xc9, 0xed, 0x70, 0x0f, 0xab, 0x35, 0x67, 0x27,
0x5a, 0x89, 0xc1, 0x82, 0xb8, 0xba, 0x54, 0x79, 0xb1, 0x34, 0x67, 0x21, 0xb5, 0xeb, 0xe2, 0xc2,
0x57, 0xfd, 0xce, 0x95, 0x23, 0xa8, 0xe9, 0x39, 0x84, 0xad, 0xe9, 0x87, 0xbe, 0x22, 0xa4, 0x3f,
0xdf, 0xb8, 0xa1, 0x95, 0x6b, 0x8f, 0x2a, 0xdb, 0x0f, 0xe0, 0x02, 0xf5, 0x1c, 0xaa, 0x23, 0x27 };

BYTE q[256] = {
               0xe0, 0x10, 0x19, 0x7e, 0xcb, 0x2a, 0x43, 0xe8, 0xe0, 0xf5, 0x23, 0x3a, 0xa8, 0x6b, 0xc1, 0xe4,
0x8b, 0x08, 0x6e, 0x2d, 0x85, 0x5d, 0x51, 0x50, 0x46, 0x80, 0x71, 0xf7, 0xf8, 0x64, 0x86, 0xbc,
0xc9, 0x9c, 0xa0, 0xa9, 0x8b, 0xbc, 0xae, 0x01, 0xf5, 0x73, 0x25, 0xff, 0xb7, 0xd3, 0x01, 0x59,
0x29, 0x38, 0xe0, 0xc5, 0x87, 0xd6, 0x42, 0x99, 0x22, 0x5e, 0xd6, 0x8b, 0x48, 0xd1, 0x28, 0x85,
0x54, 0x56, 0x6d, 0xa3, 0x4d, 0xe9, 0xf9, 0x5c, 0xb5, 0x80, 0x8a, 0xe4, 0x7b, 0xbc, 0x5a, 0xa0,
0xfc, 0xc5, 0x52, 0xf2, 0x47, 0x0a, 0x33, 0x5c, 0x60, 0xe0, 0x0a, 0x4b, 0xe0, 0xfb, 0xab, 0x21,
0x1c, 0x39, 0x59, 0x89, 0x51, 0xc6, 0xd3, 0xb5, 0x52, 0x3e, 0xd3, 0x95, 0xcd, 0x6f, 0x49, 0x0f,
0xda, 0x21, 0x08, 0xf3, 0xf0, 0x12, 0x18, 0x32, 0x27, 0x9a, 0xdf, 0xe5, 0xc5, 0x6b, 0xf1, 0xe2,
0x3b, 0x38, 0xc8, 0x58, 0x1b, 0xa5, 0xe0, 0x0f, 0xe1, 0x9b, 0xb9, 0x40, 0xa4, 0x92, 0xac, 0x4f,
0x54, 0x08, 0xd4, 0xcb, 0x22, 0x81, 0x6b, 0xad, 0x1a, 0xd5, 0x0f, 0xf3, 0xbd, 0x8a, 0x2b, 0x85,
0x0b, 0xa6, 0xa8, 0x12, 0xfb, 0x03, 0x60, 0x17, 0x51, 0xa5, 0xe2, 0x1a, 0xb1, 0xa6, 0x8c, 0x5d,
0x4c, 0x1f, 0x25, 0x24, 0x13, 0x09, 0xc1, 0xd5, 0xb0, 0x00, 0x28, 0x2f, 0x6c, 0x1b, 0x1b, 0xad,
0x67, 0x83, 0xea, 0xb2, 0x4c, 0x7f, 0xb3, 0x02, 0x9b, 0x99, 0x1a, 0xde, 0x00, 0x9c, 0x9d, 0x75,
0x15, 0x1b, 0x5a, 0xdd, 0x0a, 0x7b, 0xc5, 0x96, 0x8c, 0xb1, 0x30, 0xcd, 0xdb, 0x0d, 0x4b, 0xdd,
0x11, 0x7c, 0xaf, 0x2c, 0x2a, 0x82, 0xa4, 0xe2, 0xea, 0x1b, 0xcb, 0xc4, 0xec, 0x82, 0x8f, 0x9a,
0x9b, 0x4b, 0xa3, 0x99, 0x0d, 0x46, 0x63, 0x8b, 0x60, 0x62, 0xcf, 0x93, 0xab, 0xff, 0x08, 0x15 };





void GET_ALG_RSA_HANDLE(BCRYPT_ALG_HANDLE* handle)
{
    NTSTATUS status = BCryptOpenAlgorithmProvider(
        handle,                 // Algorithm Handle pointer 
        BCRYPT_RSA_ALGORITHM,   // Cryptographic Algorithm name 
        NULL,                   // 
        0);                     // Flags 

    if (!NT_SUCCESS(status))
    {
        printf("Error Code : %x \n BCryptOpenAlgorithmProvider fail\n", status);
        return;
    }

    return;
}


int SettingPublicKeyBLOB(PrivateKey_BLOB** BLOB)
{
    *BLOB = (PrivateKey_BLOB*)(malloc)(sizeof(PrivateKey_BLOB));
    if (*BLOB == NULL) return FAIL;

    (*BLOB)->Magic = BCRYPT_RSAPRIVATE_MAGIC;
    (*BLOB)->BitLength = 4096;
    (*BLOB)->cbPublicExp = 3;
    (*BLOB)->cbModulus = 512;
    (*BLOB)->cbPrime1 = 256;
    (*BLOB)->cbPrime2 = 256;
    memcpy((*BLOB)->PublicExponent, e, 3);
    memcpy((*BLOB)->Modulus, n, 512);
    memcpy((*BLOB)->p, p, 256);
    memcpy((*BLOB)->q, q, 256);

    return SUCCESS;
}


void FreePrivateKeyBLOB(PrivateKey_BLOB** BLOB)
{
    if ((*BLOB) == NULL) return;

    free(*BLOB);
    return;
}


void RSA_4096_Test(BCRYPT_ALG_HANDLE ALG_HANDLE)                // RSA4096/PKCS1
{
    NTSTATUS status = 0;
    DWORD bufferSize = 0;
    BCRYPT_KEY_HANDLE PRIVATEKEY_HANDLE = NULL;
    BYTE newcipherkey[512] = { 0, };
    memcpy(newcipherkey, &cipherkey, 512);

    PrivateKey_BLOB* RSA_PRIVATEKEY = NULL;                       // PrivateKeyBLOB Setting         
    if (!SettingPublicKeyBLOB(&RSA_PRIVATEKEY)) {
        printf("Memory Allocation Fail...\n");
        FreePrivateKeyBLOB(&RSA_PRIVATEKEY);
        return;
    }

    status = BCryptImportKeyPair(
        ALG_HANDLE,                        // CNG Algorithm Handle 
        NULL,                              // Not use 
        BCRYPT_RSAPRIVATE_BLOB,            // Type of blob
        &PRIVATEKEY_HANDLE,                // A pointer to Key Handle
        (PBYTE)&RSA_PRIVATEKEY->Magic,     // Address of a buffer that contains the key blob
        PrivateKeyBLOB_Size,               // Size of the buffer that contains the key blob 
        BCRYPT_NO_KEY_VALIDATION);         // Flags 
    if (!NT_SUCCESS(status))
    {
        printf("Error Code : %x \n BCryptImportKeyPair fail\n", status);
        BCryptDestroyKey(PRIVATEKEY_HANDLE);
        FreePrivateKeyBLOB(&RSA_PRIVATEKEY);
        return;
    }


    status = BCryptDecrypt(                         // Calculate plaintext length
        PRIVATEKEY_HANDLE,       // KEY HANDLE
        newcipherkey,              // Address of the buffer that contains the ciphertext 
        sizeof(newcipherkey),      // Size of the buffer that contains the ciphertext 
        NULL,                    // A pointer to padding info used with asymetric; OEAP
        NULL,                    // Address of the buffer that contains the Initial Vector 
        0,                       // Size of the buffer that contains the Initial Vector
        NULL,                    // Address of the buffer that receives the plaintext. 
        0,                       // Size of the buffer that receives the plaintext
        &plainkeyLength,        // Variable that receives number of bytes copied to plaintext buffer
        BCRYPT_PAD_PKCS1);       // Flags : Padding 
    if (!NT_SUCCESS(status))
    {
        printf("Error Code : %x \n BCryptDecrypt fail(Calculate plaintextLength)\n", status);
        BCryptDestroyKey(PRIVATEKEY_HANDLE);
        FreePrivateKeyBLOB(&RSA_PRIVATEKEY);
        return;
    }
    else
    {
        plainkey = (PBYTE)calloc(plainkeyLength, sizeof(BYTE));
        if (plainkey == NULL)
        {
            printf("Memory Allocation(plaintext) Fail...\n");
            BCryptDestroyKey(PRIVATEKEY_HANDLE);
            FreePrivateKeyBLOB(&RSA_PRIVATEKEY);
            return;
        }
    }


    status = BCryptDecrypt(                         // Decrypt data
        PRIVATEKEY_HANDLE,       // KEY HANDLE
        cipherkey,              // Address of the buffer that contains the ciphertext 
        sizeof(cipherkey),      // Size of the buffer that contains the ciphertext 
        NULL,                    // A pointer to padding info used with asymetric; OAEP
        NULL,                    // Address of the buffer that contains the Initial Vector 
        0,                       // Size of the buffer that contains the Initial Vector
        plainkey,               // Address of the buffer that receives the plaintext. 
        plainkeyLength,         // Size of the buffer that receives the plaintext
        &plainkeyLength,        // Variable that receives number of bytes copied to plaintext buffer
        BCRYPT_PAD_PKCS1);       // Flags : Padding 
    if (!NT_SUCCESS(status))
    {
        printf("Error Code : %x \n BCryptDecrypt fail\n", status);
        free(plainkey);
        BCryptDestroyKey(PRIVATEKEY_HANDLE);
        FreePrivateKeyBLOB(&RSA_PRIVATEKEY);
        return;
    }
    std::cout << plainkeyLength;
    PRINT(plainkey, plainkeyLength, PRINT_PLAINKEY);
    //PRINT(newcipherkey, sizeof(newcipherkey), PRINT_CIPHERTEXT);

    BCryptDestroyKey(PRIVATEKEY_HANDLE);
    FreePrivateKeyBLOB(&RSA_PRIVATEKEY);

    return;
}


